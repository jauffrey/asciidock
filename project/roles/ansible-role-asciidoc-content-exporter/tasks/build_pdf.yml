---
- name: "[PDF]: Check if final document exists"
  stat:
    path: "{{export_dir}}/{{pdfs.key}}"
  register: pdf_export_stat

- name: "[PDF]: Remove {{pdfs.key}} in {{export_dir}} folder"
  file:
    path: "{{export_dir}}/{{pdfs.key}}"
    state: absent
  when: rebuild_item

- name: "[PDF]: Remove {{pdfs.key}}{{asciidoc_extension}} in {{export_dir}} folder because of uncommitted changes"
  file:
    path: "{{export_dir}}/{{pdfs.key}}{{asciidoc_extension}}"
    state: absent
  when: rebuild_item

- name: "[PDF]: Check if merged document exists"
  stat:
    path: "{{export_dir}}/{{pdfs.key}}{{asciidoc_extension}}"
  register: pdf_stat

- name: "[PDF]: Content aggregation"
  lineinfile: 
    dest: "{{export_dir}}/{{pdfs.key}}{{asciidoc_extension}}"
    line: "{{lookup('file', item )}}"
    create: yes
  loop: "{{pdfs.value.content}}"
  when: pdf_stat.stat.exists == False

- name: "[PDF]: Add asciidocker support page"
  lineinfile: 
    dest: "{{export_dir}}/{{pdfs.key}}{{asciidoc_extension}}"
    line: "{{lookup('file', 'banner.adoc' )}}"
    create: yes
  when: pdf_stat.stat.exists == False and include_banner

- name: "[PDF]: PDF Content export"
  # Note: Content dir here is relative to the location of the merged presentation. So we need to go back to the root of the project
  command: "{{export_dir}}/.bundle/.bin/asciidoctor-pdf {{export_dir}}/{{pdfs.key}}{{asciidoc_extension}} -D {{export_dir}} -o {{pdfs.key}}"
  when: rebuild_item